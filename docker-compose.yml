services:
  grafana:
    container_name: grafana
    image: grafana/grafana
    build:
      context: .
      dockerfile: grafana.dockerfile
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      mynet:
        ipv4_address: 173.20.0.8
  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    networks:
      mynet:
        ipv4_address: 173.20.0.6
    depends_on:
      - aicaller
      - bridge_server
  pdf_generator:
    container_name: pdf_generator
    build:
      context: .
      dockerfile: pdfGenerator.dockerfile
    restart: always
    depends_on:
      - bridge_server
    networks:
      mynet:
        ipv4_address: 173.20.0.7
  postgres:
    build:
      context: .
      dockerfile: db.dockerfile
    container_name: wisher_database
    image: postgres:latest
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -h localhost -U postgres" ]
      interval: 5s
      timeout: 1s
      retries: 2
    volumes:
      - dbdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: always
    networks:
      mynet:
        ipv4_address: 173.20.0.2
  bot:
    container_name: wisher_bot
    build:
      context: .
      dockerfile: bot.dockerfile
    restart: always
    depends_on:
      - postgres
      - aicaller
      - bridge_server
    stdin_open: true
    expose:
      - 8080
    networks:
      mynet:
          ipv4_address: 173.20.0.3
  aicaller:
    container_name: wisher_ai_requester
    build:
      context: .
      dockerfile: congratulator.dockerfile
    restart: always
    depends_on:
      - postgres
    stdin_open: true
    expose:
      - 8081
    networks:
      mynet:
          ipv4_address: 173.20.0.4
  bridge_server:
    container_name: bridge_server
    build:
      context: .
      dockerfile: bridge.dockerfile
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      aicaller:
        condition: service_started
    stdin_open: true
    networks:
      mynet:
        ipv4_address: 173.20.0.5
volumes:
  dbdata:
  grafana_data:
networks:
  mynet:
    driver: "bridge"
    ipam:
      config:
        - subnet: 173.20.0.0/16
          gateway: 173.20.0.1
