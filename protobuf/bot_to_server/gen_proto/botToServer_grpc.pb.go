// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.3
// source: protobuf/bot_to_server/botToServer.proto

package gen_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CongratulationService_SaveUserInfo_FullMethodName              = "/bridgeServer_service.CongratulationService/SaveUserInfo"
	CongratulationService_GetDataForCongratulations_FullMethodName = "/bridgeServer_service.CongratulationService/GetDataForCongratulations"
	CongratulationService_GetSoonBirthdays_FullMethodName          = "/bridgeServer_service.CongratulationService/GetSoonBirthdays"
)

// CongratulationServiceClient is the client API for CongratulationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CongratulationServiceClient interface {
	SaveUserInfo(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetDataForCongratulations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (CongratulationService_GetDataForCongratulationsClient, error)
	GetSoonBirthdays(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatBirthdaysResponse, error)
}

type congratulationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCongratulationServiceClient(cc grpc.ClientConnInterface) CongratulationServiceClient {
	return &congratulationServiceClient{cc}
}

func (c *congratulationServiceClient) SaveUserInfo(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CongratulationService_SaveUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *congratulationServiceClient) GetDataForCongratulations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (CongratulationService_GetDataForCongratulationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CongratulationService_ServiceDesc.Streams[0], CongratulationService_GetDataForCongratulations_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &congratulationServiceGetDataForCongratulationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CongratulationService_GetDataForCongratulationsClient interface {
	Recv() (*CongratulationResponse, error)
	grpc.ClientStream
}

type congratulationServiceGetDataForCongratulationsClient struct {
	grpc.ClientStream
}

func (x *congratulationServiceGetDataForCongratulationsClient) Recv() (*CongratulationResponse, error) {
	m := new(CongratulationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *congratulationServiceClient) GetSoonBirthdays(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatBirthdaysResponse, error) {
	out := new(ChatBirthdaysResponse)
	err := c.cc.Invoke(ctx, CongratulationService_GetSoonBirthdays_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CongratulationServiceServer is the server API for CongratulationService service.
// All implementations must embed UnimplementedCongratulationServiceServer
// for forward compatibility
type CongratulationServiceServer interface {
	SaveUserInfo(context.Context, *UserRequest) (*emptypb.Empty, error)
	GetDataForCongratulations(*emptypb.Empty, CongratulationService_GetDataForCongratulationsServer) error
	GetSoonBirthdays(context.Context, *ChatRequest) (*ChatBirthdaysResponse, error)
	mustEmbedUnimplementedCongratulationServiceServer()
}

// UnimplementedCongratulationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCongratulationServiceServer struct {
}

func (UnimplementedCongratulationServiceServer) SaveUserInfo(context.Context, *UserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUserInfo not implemented")
}
func (UnimplementedCongratulationServiceServer) GetDataForCongratulations(*emptypb.Empty, CongratulationService_GetDataForCongratulationsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDataForCongratulations not implemented")
}
func (UnimplementedCongratulationServiceServer) GetSoonBirthdays(context.Context, *ChatRequest) (*ChatBirthdaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoonBirthdays not implemented")
}
func (UnimplementedCongratulationServiceServer) mustEmbedUnimplementedCongratulationServiceServer() {}

// UnsafeCongratulationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CongratulationServiceServer will
// result in compilation errors.
type UnsafeCongratulationServiceServer interface {
	mustEmbedUnimplementedCongratulationServiceServer()
}

func RegisterCongratulationServiceServer(s grpc.ServiceRegistrar, srv CongratulationServiceServer) {
	s.RegisterService(&CongratulationService_ServiceDesc, srv)
}

func _CongratulationService_SaveUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CongratulationServiceServer).SaveUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CongratulationService_SaveUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CongratulationServiceServer).SaveUserInfo(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CongratulationService_GetDataForCongratulations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CongratulationServiceServer).GetDataForCongratulations(m, &congratulationServiceGetDataForCongratulationsServer{stream})
}

type CongratulationService_GetDataForCongratulationsServer interface {
	Send(*CongratulationResponse) error
	grpc.ServerStream
}

type congratulationServiceGetDataForCongratulationsServer struct {
	grpc.ServerStream
}

func (x *congratulationServiceGetDataForCongratulationsServer) Send(m *CongratulationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CongratulationService_GetSoonBirthdays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CongratulationServiceServer).GetSoonBirthdays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CongratulationService_GetSoonBirthdays_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CongratulationServiceServer).GetSoonBirthdays(ctx, req.(*ChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CongratulationService_ServiceDesc is the grpc.ServiceDesc for CongratulationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CongratulationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bridgeServer_service.CongratulationService",
	HandlerType: (*CongratulationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveUserInfo",
			Handler:    _CongratulationService_SaveUserInfo_Handler,
		},
		{
			MethodName: "GetSoonBirthdays",
			Handler:    _CongratulationService_GetSoonBirthdays_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDataForCongratulations",
			Handler:       _CongratulationService_GetDataForCongratulations_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protobuf/bot_to_server/botToServer.proto",
}
